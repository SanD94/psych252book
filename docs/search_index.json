[
["data-wrangling-1.html", "Chapter 4 Data wrangling 1 4.1 Learning goals 4.2 Install packages 4.3 Load packages 4.4 Some R basics 4.5 Looking at data 4.6 Wrangling data 4.7 Additional resources 4.8 Session info", " Chapter 4 Data wrangling 1 In this lecture, we will take a look at how to wrangle data using the dplyr package. Again, getting our data into shape is something we’ll need to do throughout the course, so it’s worth spending some time getting a good sense for how this works. The nice thing about R is that (thanks to the tidyverse), both visualization and data wrangling are particularly powerful. 4.1 Learning goals Review R basics (incl. variable modes, data types, operators, control flow, and functions). Learn how the pipe operator %&gt;% works. See different ways for getting a sense of one’s data. Master key data manipulation verbs from the dplyr package (incl. filter(), rename(), select(), mutate(), and arrange()) 4.2 Install packages install.packages(c(&quot;skimr&quot;, &quot;visdat&quot;, &quot;summarytools&quot;, &quot;DT&quot;)) 4.3 Load packages Let’s first load the packages that we need for this chapter. library(&quot;knitr&quot;) # for rendering the RMarkdown file library(&quot;skimr&quot;) # for visualizing data library(&quot;visdat&quot;) # for visualizing data library(&quot;summarytools&quot;) # for visualizing data library(&quot;DT&quot;) # for visualizing data library(&quot;tidyverse&quot;) # for data wrangling 4.4 Some R basics To test your knowledge of the R basics, I recommend taking the free interactive tutorial on datacamp: Introduction to R. Here, I will just give a very quick overview of some of the basics. 4.4.1 Modes Variables in R can have different modes. Table 4.1 shows the most common ones. Table 4.1: Most commonly used variable modes in R. name example numeric 1, 3, 48 character 'Steve', 'a', '78' logical TRUE, FALSE not available NA For characters you can either use \" or '. R has a number of functions to convert a variable from one mode to another. NA is used for missing values. tmp1 = &quot;1&quot; # we start with a character str(tmp1) ## chr &quot;1&quot; tmp2 = as.numeric(tmp1) # turn it into a numeric str(tmp2) ## num 1 tmp3 = as.factor(tmp2) # turn that into a factor str(tmp3) ## Factor w/ 1 level &quot;1&quot;: 1 tmp4 = as.character(tmp3) # and go full cycle by turning it back into a character str(tmp4) ## chr &quot;1&quot; identical(tmp1, tmp4) # checks whether tmp1 and tmp4 are the same ## [1] TRUE The str() function displays the structure of an R object. Here, it shows us what mode the variable is. 4.4.2 Data types R has a number of different data types. Table 4.2 shows the ones you’re most likely to come across (taken from this source): Table 4.2: Most commonly used data types in R. name description vector list of values with of the same variable mode factor for ordinal variables matrix 2D data structure array same as matrix for higher dimensional data data frame similar to matrix but with column names list flexible type that can contain different other variable types 4.4.2.1 Vectors We build vectors using the concatenate function c(), and we use [] to access one or more elements of a vector. numbers = c(1, 4, 5) # make a vector numbers[2] # access the second element ## [1] 4 numbers[1:2] # access the first two elements ## [1] 1 4 numbers[c(1, 3)] # access the first and last element ## [1] 1 5 In R (unlike in Python for example), 1 refers to the first element of a vector (or list). 4.4.2.2 Matrix We build a matrix using the matrix() function, and we use [] to access its elements. matrix = matrix(data = c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2) matrix # the full matrix ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 matrix[1, 2] # element in row 1, column 2 ## [1] 4 matrix[1, ] # all elements in the first row ## [1] 1 4 matrix[ , 1] # all elements in the first column ## [1] 1 2 3 matrix[-1, ] # a matrix which excludes the first row ## [,1] [,2] ## [1,] 2 5 ## [2,] 3 6 Note how we use an empty placeholder to indicate that we want to select all the values in a row or column, and - to indicate that we want to remove something. 4.4.2.3 Array Arrays work the same was as matrices with data of more than two dimensions. 4.4.2.4 Data frame df = tibble(participant_id = c(1, 2, 3), participant_name = c(&quot;Leia&quot;, &quot;Luke&quot;, &quot;Darth&quot;)) # make the data frame df # the complete data frame ## # A tibble: 3 x 2 ## participant_id participant_name ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 Leia ## 2 2 Luke ## 3 3 Darth df[1, 2] # a single element using numbers ## # A tibble: 1 x 1 ## participant_name ## &lt;chr&gt; ## 1 Leia df$participant_id # all participants ## [1] 1 2 3 df[[&quot;participant_id&quot;]] # same as before but using [[]] instead of $ ## [1] 1 2 3 df$participant_name[2] # name of the second participant ## [1] &quot;Luke&quot; df[[&quot;participant_name&quot;]][2] # same as above ## [1] &quot;Luke&quot; We’ll use data frames a lot. Data frames are like a matrix with column names. Data frames are also more general than matrices in that different columns can have different modes. For example, one column might be a character, another one numeric, and another one a factor. Here we used the tibble() function to create the data frame. A tibble is almost the same as a data frame but it has better defaults for formatting output in the console (more information on tibbles is here). 4.4.2.5 Lists l.mixed = list(number = 1, character = &quot;2&quot;, factor = factor(3), matrix = matrix(1:4, ncol = 2), df = tibble(x = c(1, 2), y = c(3, 4))) l.mixed ## $number ## [1] 1 ## ## $character ## [1] &quot;2&quot; ## ## $factor ## [1] 3 ## Levels: 3 ## ## $matrix ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## $df ## # A tibble: 2 x 2 ## x y ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 3 ## 2 2 4 # three different ways of accessing a list l.mixed$character ## [1] &quot;2&quot; l.mixed[[&quot;character&quot;]] ## [1] &quot;2&quot; l.mixed[[2]] ## [1] &quot;2&quot; Lists are a very flexible data format. You can put almost anything in a list. 4.4.3 Operators Table 4.3 shows the comparison operators that result in logical outputs. Table 4.3: Table of comparison operators that result in boolean (TRUE/FALSE) outputs. symbol name == equal to != not equal to &gt;, &lt; greater/less than &gt;=, &lt;= greater/less than or equal &amp;, &amp;#124;, ! logical operators: and, or, not %in% checks whether an element is in an object The %in% operator is very useful, and we can use it like so: x = c(1, 2, 3) 2 %in% x ## [1] TRUE c(3, 4) %in% x ## [1] TRUE FALSE It’s particularly useful for filtering data as we will see below. 4.4.4 Control flow 4.4.4.1 if-then number = 3 if (number == 1) { print(&quot;The number is 1.&quot;) } else if (number == 2) { print(&quot;The number is 2.&quot;) } else { print(&quot;The number is neither 1 nor 2.&quot;) } ## [1] &quot;The number is neither 1 nor 2.&quot; As a shorthand version, we can also use the ifelse() function like so: number = 3 ifelse(test = number == 1, yes = &quot;correct&quot;, no = &quot;false&quot;) ## [1] &quot;false&quot; 4.4.4.2 for loop sequence = 1:10 for(i in 1:length(sequence)){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 4.4.4.3 while loop number = 1 while(number &lt;= 10){ print(number) number = number + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 4.4.5 Functions fun.add_two_numbers = function(a, b){ x = a + b return(str_c(&quot;The result is &quot;, x)) } fun.add_two_numbers(1, 2) ## [1] &quot;The result is 3&quot; I’ve used the str_c() function here to concatenate the string with the number. (R converts the number x into a string for us.) Note, R functions can only return a single object. However, this object can be a list (which can contain anything). 4.4.5.1 Some often used functions Table 4.4: Some frequently used functions. name description length() length of an object dim() dimensions of an object (e.g. number of rows and columns) rm() remove an object seq() generate a sequence of numbers rep() repeat something n times max() maximum min() minimum which.max() index of the maximum which.min() index of the maximum mean() mean median() median sum() sum var() variance sd() standard deviation 4.4.6 The pipe operator %&gt;% Figure 4.1: Inspiration for the magrittr package name. Figure 4.2: The magrittr package logo. The pipe operator %&gt;% is a special operator introduced in the magrittr package. It is used heavily in the tidyverse. The basic idea is simple: this operator allows us to “pipe” several functions into one long chain that matches the order in which we want to do stuff. Let’s consider the following example of making and eating a cake (thanks to https://twitter.com/dmi3k/status/1191824875842879489?s=09). This would be the traditional way of writing some code: eat( slice( bake( put( pour( mix(ingredients), into = baking_form), into = oven), time = 30), pieces = 6, 1) ) To see what’s going on here, we need to read the code inside out. That is, we have to start in the innermost bracket, and then work our way outward. However, there is a natural causal ordering to these steps and wouldn’t it be nice if we could just write code in that order? Thanks to the pipe operator %&gt;% we can! Here is the same example using the pipe: ingredients %&gt;% mix %&gt;% pour(into = baking_form) %&gt;% put(into = oven) %&gt;% bake(time = 30) %&gt;% slice(pieces = 6) %&gt;% eat(1) This code is much easier to read and write, since it represents the order in which we want to do things! Abstractly, the pipe operator does the following: f(x) can be rewritten as x %&gt;% f() For example, in standard R, we would write: x = 1:3 # standard R sum(x) ## [1] 6 With the pipe, we can rewrite this as: x = 1:3 # with the pipe x %&gt;% sum() ## [1] 6 This doesn’t seem super useful yet, but just hold on a little longer. f(x, y) can be rewritten as x %&gt;% f(y) So, we could rewrite the following standard R code … # rounding pi to 6 digits, standard R round(pi, digits = 6) ## [1] 3.141593 … by using the pipe: # rounding pi to 6 digits, standard R pi %&gt;% round(digits = 6) ## [1] 3.141593 Here is another example: a = 3 b = 4 sum(a, b) # standard way ## [1] 7 a %&gt;% sum(b) # the pipe way ## [1] 7 The pipe operator inserts the result of the previous computation as a first element into the next computation. So, a %&gt;% sum(b) is equivalent to sum(a, b). We can also specify to insert the result at a different position via the . operator. For example: a = 1 b = 10 b %&gt;% seq(from = a, to = .) ## [1] 1 2 3 4 5 6 7 8 9 10 Here, I used the . operator to specify that I woud like to insert the result of b where I’ve put the . in the seq() function. f(x, y) can be rewritten as y %&gt;% f(x, .) Still not to thrilled about the pipe? We can keep going though (and I’m sure you’ll be convinced eventually.) h(g(f(x))) can be rewritten as x %&gt;% f() %&gt;% g() %&gt;% h() For example, consider that we want to calculate the root mean squared error (RMSE) between prediction and data. Here is how the RMSE is defined: \\[ \\text{RMSE} = \\sqrt\\frac{\\sum_{i=1}^n(\\hat{y}_i-y_i)^2}{n} \\] where \\(\\hat{y}_i\\) denotes the prediction, and \\(y_i\\) the actually observed value. In base R, we would do the following. data = c(1, 3, 4, 2, 5) prediction = c(1, 2, 2, 1, 4) # calculate root mean squared error rmse = sqrt(mean((prediction-data)^2)) print(rmse) ## [1] 1.183216 Using the pipe operator makes the operation more intuitive: data = c(1, 3, 4, 2, 5) prediction = c(1, 2, 2, 1, 4) # calculate root mean squared error the pipe way rmse = (prediction-data)^2 %&gt;% mean() %&gt;% sqrt() %&gt;% print() ## [1] 1.183216 First, we calculate the squared error, then we take the mean, then the square root, and then print the result. The pipe operator %&gt;% is similar to the + used in ggplot2. It allows us to take step-by-step actions in a way that fits the causal ordering of how we want to do things. Tip: The keyboard shortcut for the pipe operator is: cmd/ctrl + shift + m Definitely learn this one – we’ll use the pipe a lot!! Tip: Code is generally easier to read when the pipe %&gt;% is at the end of a line (just like the + in ggplot2). A key advantage of using the pipe is that you don’t have to save intermediate computations as new variables and this helps to keep your environment nice and clean! 4.4.6.1 Practice 1 Let’s practice the pipe operator. # here are some numbers x = seq(from = 1, to = 5, by = 1) # taking the log the standard way log(x) ## [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 # now take the log the pipe way (write your code underneath) # some more numbers x = seq(from = 10, to = 5, by = -1) # the standard way mean(round(sqrt(x), digits = 2)) ## [1] 2.721667 # the pipe way (write your code underneath) 4.5 Looking at data The package dplyr which we loaded as part of the tidyverse, includes a data set with information about starwars characters. Let’s store this as df.starwars. df.starwars = starwars Note: Unlike in other languages (such as Python or Matlab), a . in a variable name has no special meaning and can just be used as part of the name. I’ve used df here to indicate for myself that this variable is a data frame. Before visualizing the data, it’s often useful to take a quick direct look at the data. There are several ways of taking a look at data in R. Personally, I like to look at the data within RStudio’s data viewer. To do so, you can: click on the df.starwars variable in the “Environment” tab type View(df.starwars) in the console move your mouse over (or select) the variable in the editor (or console) and hit F2 I like the F2 route the best as it’s fast and flexible. Sometimes it’s also helpful to look at data in the console instead of the data viewer. Particularly when the data is very large, the data viewer can be sluggish. Here are some useful functions: 4.5.1 head() Without any extra arguments specified, head() shows the top six rows of the data. head(df.starwars) ## # A tibble: 6 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… ## 4 Dart… 202 136 none white yellow 41.9 male mascu… ## 5 Leia… 150 49 brown light brown 19 fema… femin… ## 6 Owen… 178 120 brown, gr… light blue 52 male mascu… ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; 4.5.2 glimpse() glimpse() is helpful when the data frame has many columns. The data is shown in a transposed way with columns as rows. glimpse(df.starwars) ## Rows: 87 ## Columns: 14 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia O… ## $ height &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, … ## $ mass &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77… ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, … ## $ skin_color &lt;chr&gt; &quot;fair&quot;, &quot;gold&quot;, &quot;white, blue&quot;, &quot;white&quot;, &quot;light&quot;, &quot;light&quot;, … ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;… ## $ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0,… ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;none&quot;, &quot;none&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;… ## $ gender &lt;chr&gt; &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;masculine&quot;, &quot;femin… ## $ homeworld &lt;chr&gt; &quot;Tatooine&quot;, &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, &quot;Alderaan&quot;, &quot;… ## $ species &lt;chr&gt; &quot;Human&quot;, &quot;Droid&quot;, &quot;Droid&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Hum… ## $ films &lt;list&gt; [&lt;&quot;The Empire Strikes Back&quot;, &quot;Revenge of the Sith&quot;, &quot;Retu… ## $ vehicles &lt;list&gt; [&lt;&quot;Snowspeeder&quot;, &quot;Imperial Speeder Bike&quot;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &quot;I… ## $ starships &lt;list&gt; [&lt;&quot;X-wing&quot;, &quot;Imperial shuttle&quot;&gt;, &lt;&gt;, &lt;&gt;, &quot;TIE Advanced x1… 4.5.3 distinct() distinct() shows all the distinct values for a character or factor column. df.starwars %&gt;% distinct(name) ## # A tibble: 87 x 1 ## name ## &lt;chr&gt; ## 1 Luke Skywalker ## 2 C-3PO ## 3 R2-D2 ## 4 Darth Vader ## 5 Leia Organa ## 6 Owen Lars ## 7 Beru Whitesun lars ## 8 R5-D4 ## 9 Biggs Darklighter ## 10 Obi-Wan Kenobi ## # … with 77 more rows 4.5.4 count() count() shows a count of all the different distinct values in a column. df.starwars %&gt;% count(gender) ## # A tibble: 3 x 2 ## gender n ## &lt;chr&gt; &lt;int&gt; ## 1 feminine 17 ## 2 masculine 66 ## 3 &lt;NA&gt; 4 It’s possible to do grouped counts by combining several variables. df.starwars %&gt;% count(species, gender) %&gt;% head(n = 10) ## # A tibble: 10 x 3 ## species gender n ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Aleena masculine 1 ## 2 Besalisk masculine 1 ## 3 Cerean masculine 1 ## 4 Chagrian masculine 1 ## 5 Clawdite feminine 1 ## 6 Droid feminine 1 ## 7 Droid masculine 5 ## 8 Dug masculine 1 ## 9 Ewok masculine 1 ## 10 Geonosian masculine 1 4.5.5 datatable() For RMardkown files specifically, we can use the datatable() function from the DT package to get an interactive table widget. df.starwars %&gt;% DT::datatable() 4.5.6 Other tools for taking a quick look at data 4.5.6.1 vis_dat() The vis_dat() function from the visdat package, gives a visual summary that makes it easy to see the variable types and whether there are missing values in the data. visdat::vis_dat(df.starwars) When R loads packages, functions loaded in earlier packages are overwritten by functions of the same name from later packages. This means that the order in which packages are loaded matters. To make sure that a function from the correct package is used, you can use the package_name::function_name() construction. This way, the function_name() from the package_name is used, rather than the same function from a different package. This is why, in general, I recommend to load the tidyverse package last (since it contains a large number of functions that we use a lot). 4.5.6.2 skim() The skim() function from the skimr package provides a nice overview of the data, separated by variable types. # install.packages(&quot;skimr&quot;) skimr::skim(df.starwars) Table 4.5: Data summary Name df.starwars Number of rows 87 Number of columns 14 _______________________ Column type frequency: character 8 list 3 numeric 3 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace name 0 1.00 3 21 0 87 0 hair_color 5 0.94 4 13 0 12 0 skin_color 0 1.00 3 19 0 31 0 eye_color 0 1.00 3 13 0 15 0 sex 4 0.95 4 14 0 4 0 gender 4 0.95 8 9 0 2 0 homeworld 10 0.89 4 14 0 48 0 species 4 0.95 3 14 0 37 0 Variable type: list skim_variable n_missing complete_rate n_unique min_length max_length films 0 1 24 1 7 vehicles 0 1 11 0 2 starships 0 1 17 0 5 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist height 6 0.93 174.36 34.77 66 167.0 180 191.0 264 ▁▁▇▅▁ mass 28 0.68 97.31 169.46 15 55.6 79 84.5 1358 ▇▁▁▁▁ birth_year 44 0.49 87.57 154.69 8 35.0 52 72.0 896 ▇▁▁▁▁ 4.5.6.3 dfSummary() The summarytools package is another great package for taking a look at the data. It renders a nice html output for the data frame including a lot of helpful information. You can find out more about this package here. df.starwars %&gt;% select_if(negate(is.list)) %&gt;% # this removes all list columns summarytools::dfSummary() %&gt;% summarytools::view() Note: The summarytools::view() function will not show up here in the html. It generates a summary of the data that is displayed in the Viewer in RStudio. Once we’ve taken a look at the data, the next step would be to visualize relationships between variables of interest. 4.5.7 A quick note on naming things Personally, I like to name things in a (pretty) consistent way so that I have no trouble finding stuff even when I open up a project that I haven’t worked on for a while. I try to use the following naming conventions: Table 4.6: Some naming conventions I adopt to make my life easier. name use df.thing for data frames l.thing for lists fun.thing for functions tmp.thing for temporary variables 4.6 Wrangling data We use the functions in the package dplyr to manipulate our data. 4.6.1 filter() filter() lets us apply logical (and other) operators (see Table 4.3) to subset the data. Here, I’ve filtered out the male characters. df.starwars %&gt;% filter(gender == &#39;male&#39;) ## # A tibble: 0 x 14 ## # … with 14 variables: name &lt;chr&gt;, height &lt;int&gt;, mass &lt;dbl&gt;, hair_color &lt;chr&gt;, ## # skin_color &lt;chr&gt;, eye_color &lt;chr&gt;, birth_year &lt;dbl&gt;, sex &lt;chr&gt;, ## # gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; We can combine multiple conditions in the same call. Here, I’ve filtered out male characters, whose height is greater than the median height (i.e. they are in the top 50 percentile), and whose mass was not NA. df.starwars %&gt;% filter(gender == &#39;male&#39;, height &gt; median(height, na.rm = T), !is.na(mass)) ## # A tibble: 0 x 14 ## # … with 14 variables: name &lt;chr&gt;, height &lt;int&gt;, mass &lt;dbl&gt;, hair_color &lt;chr&gt;, ## # skin_color &lt;chr&gt;, eye_color &lt;chr&gt;, birth_year &lt;dbl&gt;, sex &lt;chr&gt;, ## # gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; Many functions like mean(), median(), var(), sd(), sum() have the argument na.rm which is set to FALSE by default. I set the argument to TRUE here (or T for short), which means that the NA values are ignored, and the median() is calculated based on the remaning values. You can use , and &amp; interchangeably in filter(). Make sure to use parentheses when combining several logical operators to indicate which logical operation should be performed first: df.starwars %&gt;% filter((skin_color %in% c(&quot;dark&quot;, &quot;pale&quot;) | gender == &quot;hermaphrodite&quot;) &amp; height &gt; 170) ## # A tibble: 9 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Land… 177 79 black dark brown 31 male mascu… ## 2 Quar… 183 NA black dark brown 62 &lt;NA&gt; &lt;NA&gt; ## 3 Bib … 180 NA none pale pink NA male mascu… ## 4 Mace… 188 84 none dark brown 72 male mascu… ## 5 Ki-A… 198 82 white pale yellow 92 male mascu… ## 6 Adi … 184 50 none dark blue NA fema… femin… ## 7 Saes… 188 NA none pale orange NA male mascu… ## 8 Greg… 185 85 black dark brown NA male mascu… ## 9 Sly … 178 48 none pale white NA &lt;NA&gt; &lt;NA&gt; ## # … with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; The starwars characters that have either a \"dark\" or a \"pale\" skin tone, or whose gender is \"hermaphrodite\", and whose height is at least 170 cm. The %in% operator is useful when there are multiple options. Instead of skin_color %in% c(\"dark\", \"pale\"), I could have also written skin_color == \"dark\" | skin_color == \"pale\" but this gets cumbersome as the number of options increases. 4.6.2 arrange() arrange() allows us to sort the values in a data frame by one or more column entries. df.starwars %&gt;% arrange(hair_color, desc(height)) ## # A tibble: 87 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Mon … 150 NA auburn fair blue 48 fema… femin… ## 2 Wilh… 180 NA auburn, g… fair blue 64 male mascu… ## 3 Obi-… 182 77 auburn, w… fair blue-gray 57 male mascu… ## 4 Bail… 191 NA black tan brown 67 male mascu… ## 5 Greg… 185 85 black dark brown NA male mascu… ## 6 Bigg… 183 84 black light brown 24 male mascu… ## 7 Boba… 183 78.2 black fair brown 31.5 male mascu… ## 8 Quar… 183 NA black dark brown 62 &lt;NA&gt; &lt;NA&gt; ## 9 Jang… 183 79 black tan brown 66 male mascu… ## 10 Land… 177 79 black dark brown 31 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; Here, I’ve sorted the data frame first by hair_color, and then by height. I’ve used the desc() function to sort height in descending order. Bail Prestor Organa is the tallest black character in starwars. 4.6.3 rename() rename() renames column names. df.starwars %&gt;% rename(person = name, mass_kg = mass) ## # A tibble: 87 x 14 ## person height mass_kg hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke … 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… ## 4 Darth… 202 136 none white yellow 41.9 male mascu… ## 5 Leia … 150 49 brown light brown 19 fema… femin… ## 6 Owen … 178 120 brown, gr… light blue 52 male mascu… ## 7 Beru … 165 75 brown light blue 47 fema… femin… ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu… ## 9 Biggs… 183 84 black light brown 24 male mascu… ## 10 Obi-W… 182 77 auburn, w… fair blue-gray 57 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; The new variable names goes on the LHS of the= sign, and the old name on the RHS. To rename all variables at the same time use set_names(): df.starwars %&gt;% set_names(letters[1:ncol(.)]) # renamed all variables to letters: a, b, ... ## # A tibble: 87 x 14 ## a b c d e f g h i j k l m ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lis&gt; &lt;lis&gt; ## 1 Luke… 172 77 blond fair blue 19 male masc… Tato… Human &lt;chr… &lt;chr… ## 2 C-3PO 167 75 &lt;NA&gt; gold yell… 112 none masc… Tato… Droid &lt;chr… &lt;chr… ## 3 R2-D2 96 32 &lt;NA&gt; whit… red 33 none masc… Naboo Droid &lt;chr… &lt;chr… ## 4 Dart… 202 136 none white yell… 41.9 male masc… Tato… Human &lt;chr… &lt;chr… ## 5 Leia… 150 49 brown light brown 19 fema… femi… Alde… Human &lt;chr… &lt;chr… ## 6 Owen… 178 120 brow… light blue 52 male masc… Tato… Human &lt;chr… &lt;chr… ## 7 Beru… 165 75 brown light blue 47 fema… femi… Tato… Human &lt;chr… &lt;chr… ## 8 R5-D4 97 32 &lt;NA&gt; whit… red NA none masc… Tato… Droid &lt;chr… &lt;chr… ## 9 Bigg… 183 84 black light brown 24 male masc… Tato… Human &lt;chr… &lt;chr… ## 10 Obi-… 182 77 aubu… fair blue… 57 male masc… Stew… Human &lt;chr… &lt;chr… ## # … with 77 more rows, and 1 more variable: n &lt;list&gt; 4.6.4 select() select() allows us to select a subset of the columns in the data frame. df.starwars %&gt;% select(name, height, mass) ## # A tibble: 87 x 3 ## name height mass ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Luke Skywalker 172 77 ## 2 C-3PO 167 75 ## 3 R2-D2 96 32 ## 4 Darth Vader 202 136 ## 5 Leia Organa 150 49 ## 6 Owen Lars 178 120 ## 7 Beru Whitesun lars 165 75 ## 8 R5-D4 97 32 ## 9 Biggs Darklighter 183 84 ## 10 Obi-Wan Kenobi 182 77 ## # … with 77 more rows We can select multiple columns using the (from:to) syntax: df.starwars %&gt;% select(name:birth_year) # from name to birth_year ## # A tibble: 87 x 7 ## name height mass hair_color skin_color eye_color birth_year ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Luke Skywalker 172 77 blond fair blue 19 ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 ## 4 Darth Vader 202 136 none white yellow 41.9 ## 5 Leia Organa 150 49 brown light brown 19 ## 6 Owen Lars 178 120 brown, grey light blue 52 ## 7 Beru Whitesun lars 165 75 brown light blue 47 ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA ## 9 Biggs Darklighter 183 84 black light brown 24 ## 10 Obi-Wan Kenobi 182 77 auburn, white fair blue-gray 57 ## # … with 77 more rows Or use a variable for column selection: columns = c(&quot;name&quot;, &quot;height&quot;, &quot;species&quot;) df.starwars %&gt;% select(one_of(columns)) # useful when using a variable for column selection ## # A tibble: 87 x 3 ## name height species ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 Luke Skywalker 172 Human ## 2 C-3PO 167 Droid ## 3 R2-D2 96 Droid ## 4 Darth Vader 202 Human ## 5 Leia Organa 150 Human ## 6 Owen Lars 178 Human ## 7 Beru Whitesun lars 165 Human ## 8 R5-D4 97 Droid ## 9 Biggs Darklighter 183 Human ## 10 Obi-Wan Kenobi 182 Human ## # … with 77 more rows We can also deselect (multiple) columns: df.starwars %&gt;% select(-name, -(birth_year:vehicles)) ## # A tibble: 87 x 6 ## height mass hair_color skin_color eye_color starships ## &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; ## 1 172 77 blond fair blue &lt;chr [2]&gt; ## 2 167 75 &lt;NA&gt; gold yellow &lt;chr [0]&gt; ## 3 96 32 &lt;NA&gt; white, blue red &lt;chr [0]&gt; ## 4 202 136 none white yellow &lt;chr [1]&gt; ## 5 150 49 brown light brown &lt;chr [0]&gt; ## 6 178 120 brown, grey light blue &lt;chr [0]&gt; ## 7 165 75 brown light blue &lt;chr [0]&gt; ## 8 97 32 &lt;NA&gt; white, red red &lt;chr [0]&gt; ## 9 183 84 black light brown &lt;chr [1]&gt; ## 10 182 77 auburn, white fair blue-gray &lt;chr [5]&gt; ## # … with 77 more rows And select columns by partially matching the column name: df.starwars %&gt;% select(contains(&quot;_&quot;)) # every column that contains the character &quot;_&quot; ## # A tibble: 87 x 4 ## hair_color skin_color eye_color birth_year ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 blond fair blue 19 ## 2 &lt;NA&gt; gold yellow 112 ## 3 &lt;NA&gt; white, blue red 33 ## 4 none white yellow 41.9 ## 5 brown light brown 19 ## 6 brown, grey light blue 52 ## 7 brown light blue 47 ## 8 &lt;NA&gt; white, red red NA ## 9 black light brown 24 ## 10 auburn, white fair blue-gray 57 ## # … with 77 more rows df.starwars %&gt;% select(starts_with(&quot;h&quot;)) # every column that starts with an &quot;h&quot; ## # A tibble: 87 x 3 ## height hair_color homeworld ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 172 blond Tatooine ## 2 167 &lt;NA&gt; Tatooine ## 3 96 &lt;NA&gt; Naboo ## 4 202 none Tatooine ## 5 150 brown Alderaan ## 6 178 brown, grey Tatooine ## 7 165 brown Tatooine ## 8 97 &lt;NA&gt; Tatooine ## 9 183 black Tatooine ## 10 182 auburn, white Stewjon ## # … with 77 more rows We can also use select() to reorder the columns: # useful trick for changing the column order, now eye_color is at the beginning df.starwars %&gt;% select(eye_color, everything()) ## # A tibble: 87 x 14 ## eye_color name height mass hair_color skin_color birth_year sex gender ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 blue Luke… 172 77 blond fair 19 male mascu… ## 2 yellow C-3PO 167 75 &lt;NA&gt; gold 112 none mascu… ## 3 red R2-D2 96 32 &lt;NA&gt; white, bl… 33 none mascu… ## 4 yellow Dart… 202 136 none white 41.9 male mascu… ## 5 brown Leia… 150 49 brown light 19 fema… femin… ## 6 blue Owen… 178 120 brown, gr… light 52 male mascu… ## 7 blue Beru… 165 75 brown light 47 fema… femin… ## 8 red R5-D4 97 32 &lt;NA&gt; white, red NA none mascu… ## 9 brown Bigg… 183 84 black light 24 male mascu… ## 10 blue-gray Obi-… 182 77 auburn, w… fair 57 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; Here, I’ve moved the eye_color column to the beginning of the data frame. everything() is a helper function which selects all the columns. df.starwars %&gt;% select(-eye_color, everything(), eye_color) # move eye_color to the end ## # A tibble: 87 x 14 ## name height mass hair_color skin_color birth_year sex gender homeworld ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair 19 male mascu… Tatooine ## 2 C-3PO 167 75 &lt;NA&gt; gold 112 none mascu… Tatooine ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… 33 none mascu… Naboo ## 4 Dart… 202 136 none white 41.9 male mascu… Tatooine ## 5 Leia… 150 49 brown light 19 fema… femin… Alderaan ## 6 Owen… 178 120 brown, gr… light 52 male mascu… Tatooine ## 7 Beru… 165 75 brown light 47 fema… femin… Tatooine ## 8 R5-D4 97 32 &lt;NA&gt; white, red NA none mascu… Tatooine ## 9 Bigg… 183 84 black light 24 male mascu… Tatooine ## 10 Obi-… 182 77 auburn, w… fair 57 male mascu… Stewjon ## # … with 77 more rows, and 5 more variables: species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, eye_color &lt;chr&gt; Here, I’ve moved eye_color to the end. Note that I had to deselect it first. 4.6.4.1 select_if() We can select columns based on their data type using select_if(). df.starwars %&gt;% select_if(is.numeric) # just select numeric columns ## # A tibble: 87 x 3 ## height mass birth_year ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 172 77 19 ## 2 167 75 112 ## 3 96 32 33 ## 4 202 136 41.9 ## 5 150 49 19 ## 6 178 120 52 ## 7 165 75 47 ## 8 97 32 NA ## 9 183 84 24 ## 10 182 77 57 ## # … with 77 more rows The following selects all columns that are not numeric: df.starwars %&gt;% select_if(~ !is.numeric(.)) # selects all columns that are not numeric ## # A tibble: 87 x 11 ## name hair_color skin_color eye_color sex gender homeworld species films ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lis&gt; ## 1 Luke… blond fair blue male mascu… Tatooine Human &lt;chr… ## 2 C-3PO &lt;NA&gt; gold yellow none mascu… Tatooine Droid &lt;chr… ## 3 R2-D2 &lt;NA&gt; white, bl… red none mascu… Naboo Droid &lt;chr… ## 4 Dart… none white yellow male mascu… Tatooine Human &lt;chr… ## 5 Leia… brown light brown fema… femin… Alderaan Human &lt;chr… ## 6 Owen… brown, gr… light blue male mascu… Tatooine Human &lt;chr… ## 7 Beru… brown light blue fema… femin… Tatooine Human &lt;chr… ## 8 R5-D4 &lt;NA&gt; white, red red none mascu… Tatooine Droid &lt;chr… ## 9 Bigg… black light brown male mascu… Tatooine Human &lt;chr… ## 10 Obi-… auburn, w… fair blue-gray male mascu… Stewjon Human &lt;chr… ## # … with 77 more rows, and 2 more variables: vehicles &lt;list&gt;, starships &lt;list&gt; Note that I used ~ here to indicate that I’m creating an anonymous function to check whether column type is numeric. A one-sided formula (expression beginning with ~) is interpreted as function(x), and wherever x would go in the function is represented by .. So, I could write the same code like so: df.starwars %&gt;% select_if(function(x) !is.numeric(x)) # selects all columns that are not numeric ## # A tibble: 87 x 11 ## name hair_color skin_color eye_color sex gender homeworld species films ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;lis&gt; ## 1 Luke… blond fair blue male mascu… Tatooine Human &lt;chr… ## 2 C-3PO &lt;NA&gt; gold yellow none mascu… Tatooine Droid &lt;chr… ## 3 R2-D2 &lt;NA&gt; white, bl… red none mascu… Naboo Droid &lt;chr… ## 4 Dart… none white yellow male mascu… Tatooine Human &lt;chr… ## 5 Leia… brown light brown fema… femin… Alderaan Human &lt;chr… ## 6 Owen… brown, gr… light blue male mascu… Tatooine Human &lt;chr… ## 7 Beru… brown light blue fema… femin… Tatooine Human &lt;chr… ## 8 R5-D4 &lt;NA&gt; white, red red none mascu… Tatooine Droid &lt;chr… ## 9 Bigg… black light brown male mascu… Tatooine Human &lt;chr… ## 10 Obi-… auburn, w… fair blue-gray male mascu… Stewjon Human &lt;chr… ## # … with 77 more rows, and 2 more variables: vehicles &lt;list&gt;, starships &lt;list&gt; We can rename some of the columns using select() like so: df.starwars %&gt;% select(person = name, height, mass_kg = mass) ## # A tibble: 87 x 3 ## person height mass_kg ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Luke Skywalker 172 77 ## 2 C-3PO 167 75 ## 3 R2-D2 96 32 ## 4 Darth Vader 202 136 ## 5 Leia Organa 150 49 ## 6 Owen Lars 178 120 ## 7 Beru Whitesun lars 165 75 ## 8 R5-D4 97 32 ## 9 Biggs Darklighter 183 84 ## 10 Obi-Wan Kenobi 182 77 ## # … with 77 more rows For more details, take a look at the help file for select(), and this this great tutorial in which I learned about some of the more advanced ways of using select(). 4.6.5 Practice 2 Create a data frame that: - only has the species Human and Droid - with the following data columns (in this order): name, species, birth_year, homeworld - is arranged according to birth year (with the oldest entry at the top of the data frame) - and has the name column renamed to person # write your code here 4.6.6 mutate() mutate() is used to change exisitng columns or make new ones. df.starwars %&gt;% mutate(height = height / 100, # to get height in meters bmi = mass / (height^2)) %&gt;% # bmi = kg / (m^2) select(name, height, mass, bmi) ## # A tibble: 87 x 4 ## name height mass bmi ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Luke Skywalker 1.72 77 26.0 ## 2 C-3PO 1.67 75 26.9 ## 3 R2-D2 0.96 32 34.7 ## 4 Darth Vader 2.02 136 33.3 ## 5 Leia Organa 1.5 49 21.8 ## 6 Owen Lars 1.78 120 37.9 ## 7 Beru Whitesun lars 1.65 75 27.5 ## 8 R5-D4 0.97 32 34.0 ## 9 Biggs Darklighter 1.83 84 25.1 ## 10 Obi-Wan Kenobi 1.82 77 23.2 ## # … with 77 more rows Here, I’ve calculated the bmi for the different starwars characters. I first mutated the height variable by going from cm to m, and then created the new column “bmi”. A useful helper function for mutate() is ifelse() which is a shorthand for the if-else control flow (Section 4.4.4.1). Here is an example: df.starwars %&gt;% mutate(height_categorical = ifelse(height &gt; median(height, na.rm = T), &quot;tall&quot;, &quot;short&quot;)) %&gt;% select(name, contains(&quot;height&quot;)) ## # A tibble: 87 x 3 ## name height height_categorical ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 Luke Skywalker 172 short ## 2 C-3PO 167 short ## 3 R2-D2 96 short ## 4 Darth Vader 202 tall ## 5 Leia Organa 150 short ## 6 Owen Lars 178 short ## 7 Beru Whitesun lars 165 short ## 8 R5-D4 97 short ## 9 Biggs Darklighter 183 tall ## 10 Obi-Wan Kenobi 182 tall ## # … with 77 more rows ifelse() works in the following way: we first specify the condition, then what should be returned if the condition is true, and finally what should be returned otherwise. The more verbose version of the statement above would be: ifelse(test = height &gt; median(height, na.rm = T), yes = \"tall\", no = \"short\") There are a number of variants of the mutate() function. Let’s take a look at them. 4.6.6.1 mutate_at() With mutate_at(), we can mutate several columns at the same time. df.starwars %&gt;% mutate_at(.vars = vars(height, mass, birth_year), .funs = &quot;scale&quot;) ## # A tibble: 87 x 14 ## name height[,1] mass[,1] hair_color skin_color eye_color birth_year[,1] ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Luke… -0.0678 -0.120 blond fair blue -0.443 ## 2 C-3PO -0.212 -0.132 &lt;NA&gt; gold yellow 0.158 ## 3 R2-D2 -2.25 -0.385 &lt;NA&gt; white, bl… red -0.353 ## 4 Dart… 0.795 0.228 none white yellow -0.295 ## 5 Leia… -0.701 -0.285 brown light brown -0.443 ## 6 Owen… 0.105 0.134 brown, gr… light blue -0.230 ## 7 Beru… -0.269 -0.132 brown light blue -0.262 ## 8 R5-D4 -2.22 -0.385 &lt;NA&gt; white, red red NA ## 9 Bigg… 0.249 -0.0786 black light brown -0.411 ## 10 Obi-… 0.220 -0.120 auburn, w… fair blue-gray -0.198 ## # … with 77 more rows, and 7 more variables: sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt; In vars() I’ve specified what variables to mutate, I’ve passed the function name \"scale\" to the .funs argument. Here, I’ve z-scored height, mass, and birth_year using the scale() function. Note that I wrote the function without (). The .funs argument expects a list of functions that can be specified by: their name, “mean” the function itself, mean a call to the function with . as a dummy argument, ~ mean(.) (note the ~ before the function call). Within vars(), we can use the same helper functions for selecting columns that we’ve seen above for select(). We can also use names to create new columns: df.starwars %&gt;% mutate_at(.vars = vars(height, mass, birth_year), .funs = list(z = &quot;scale&quot;)) %&gt;% select(name, contains(&quot;height&quot;), contains(&quot;mass&quot;), contains(&quot;birth_year&quot;)) ## # A tibble: 87 x 7 ## name height height_z[,1] mass mass_z[,1] birth_year birth_year_z[,1] ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Luke Skywal… 172 -0.0678 77 -0.120 19 -0.443 ## 2 C-3PO 167 -0.212 75 -0.132 112 0.158 ## 3 R2-D2 96 -2.25 32 -0.385 33 -0.353 ## 4 Darth Vader 202 0.795 136 0.228 41.9 -0.295 ## 5 Leia Organa 150 -0.701 49 -0.285 19 -0.443 ## 6 Owen Lars 178 0.105 120 0.134 52 -0.230 ## 7 Beru Whites… 165 -0.269 75 -0.132 47 -0.262 ## 8 R5-D4 97 -2.22 32 -0.385 NA NA ## 9 Biggs Darkl… 183 0.249 84 -0.0786 24 -0.411 ## 10 Obi-Wan Ken… 182 0.220 77 -0.120 57 -0.198 ## # … with 77 more rows As we can see, new columns were created with _z added to the end of the column name. And we can apply several functions at the same time. df.starwars %&gt;% mutate_at(vars(height, mass, birth_year), list(z = &quot;scale&quot;, centered = ~ scale(., scale = FALSE))) %&gt;% select(name, contains(&quot;height&quot;), contains(&quot;mass&quot;), contains(&quot;birth_year&quot;)) ## # A tibble: 87 x 10 ## name height height_z[,1] height_centered… mass mass_z[,1] mass_centered[,… ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Luke… 172 -0.0678 -2.36 77 -0.120 -20.3 ## 2 C-3PO 167 -0.212 -7.36 75 -0.132 -22.3 ## 3 R2-D2 96 -2.25 -78.4 32 -0.385 -65.3 ## 4 Dart… 202 0.795 27.6 136 0.228 38.7 ## 5 Leia… 150 -0.701 -24.4 49 -0.285 -48.3 ## 6 Owen… 178 0.105 3.64 120 0.134 22.7 ## 7 Beru… 165 -0.269 -9.36 75 -0.132 -22.3 ## 8 R5-D4 97 -2.22 -77.4 32 -0.385 -65.3 ## 9 Bigg… 183 0.249 8.64 84 -0.0786 -13.3 ## 10 Obi-… 182 0.220 7.64 77 -0.120 -20.3 ## # … with 77 more rows, and 3 more variables: birth_year &lt;dbl&gt;, ## # birth_year_z[,1] &lt;dbl&gt;, birth_year_centered[,1] &lt;dbl&gt; Here, I’ve created z-scored and centered (i.e. only subtracted the mean but didn’t divide by the standard deviation) versions of the height, mass, and birth_year columns in one go. 4.6.6.2 mutate_all() mutate_all() is used to mutate all columns in a data frame. df.starwars %&gt;% select(height, mass) %&gt;% mutate_all(&quot;as.character&quot;) # transform all columns to characters ## # A tibble: 87 x 2 ## height mass ## &lt;chr&gt; &lt;chr&gt; ## 1 172 77 ## 2 167 75 ## 3 96 32 ## 4 202 136 ## 5 150 49 ## 6 178 120 ## 7 165 75 ## 8 97 32 ## 9 183 84 ## 10 182 77 ## # … with 77 more rows Here, I’ve selected some columns first, and then changed the mode to character in each of them. Like we’ve seen with mutate_at(), you can add a name in the mutate_all() function call to make new columns instead of replacing the existing ones. df.starwars %&gt;% select(height, mass) %&gt;% mutate_all(.funs = list(char = &quot;as.character&quot;)) # make new character columns ## # A tibble: 87 x 4 ## height mass height_char mass_char ## &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 172 77 172 77 ## 2 167 75 167 75 ## 3 96 32 96 32 ## 4 202 136 202 136 ## 5 150 49 150 49 ## 6 178 120 178 120 ## 7 165 75 165 75 ## 8 97 32 97 32 ## 9 183 84 183 84 ## 10 182 77 182 77 ## # … with 77 more rows 4.6.6.3 mutate_if() mutate_if() can sometimes come in handy. For example, the following code changes all the numeric columns to character columns: df.starwars %&gt;% mutate_if(.predicate = &quot;is.numeric&quot;, .funs = &quot;as.character&quot;) ## # A tibble: 87 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… ## 4 Dart… 202 136 none white yellow 41.9 male mascu… ## 5 Leia… 150 49 brown light brown 19 fema… femin… ## 6 Owen… 178 120 brown, gr… light blue 52 male mascu… ## 7 Beru… 165 75 brown light blue 47 fema… femin… ## 8 R5-D4 97 32 &lt;NA&gt; white, red red &lt;NA&gt; none mascu… ## 9 Bigg… 183 84 black light brown 24 male mascu… ## 10 Obi-… 182 77 auburn, w… fair blue-gray 57 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; Or we can round all the numeric columns: df.starwars %&gt;% mutate_if(.predicate = &quot;is.numeric&quot;, .funs = &quot;round&quot;) ## # A tibble: 87 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… ## 4 Dart… 202 136 none white yellow 42 male mascu… ## 5 Leia… 150 49 brown light brown 19 fema… femin… ## 6 Owen… 178 120 brown, gr… light blue 52 male mascu… ## 7 Beru… 165 75 brown light blue 47 fema… femin… ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu… ## 9 Bigg… 183 84 black light brown 24 male mascu… ## 10 Obi-… 182 77 auburn, w… fair blue-gray 57 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; If we wanted to round to the first decimal place, we would need to use the anonymous function syntax like so: df.starwars %&gt;% mutate_if(.predicate = &quot;is.numeric&quot;, .funs = ~ round(., 1)) ## # A tibble: 87 x 14 ## name height mass hair_color skin_color eye_color birth_year sex gender ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male mascu… ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 none mascu… ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 none mascu… ## 4 Dart… 202 136 none white yellow 41.9 male mascu… ## 5 Leia… 150 49 brown light brown 19 fema… femin… ## 6 Owen… 178 120 brown, gr… light blue 52 male mascu… ## 7 Beru… 165 75 brown light blue 47 fema… femin… ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA none mascu… ## 9 Bigg… 183 84 black light brown 24 male mascu… ## 10 Obi-… 182 77 auburn, w… fair blue-gray 57 male mascu… ## # … with 77 more rows, and 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt; 4.6.7 Practice 3 Compute the body mass index for male characters who are human. select only the columns you need filter out only the rows you need make the new variable with the body mass index arrange the data frame starting with the highest body mass index # write your code here 4.7 Additional resources 4.7.1 Cheatsheets base R –&gt; summary of how to use base R (we will mostly use the tidyverse but it’s still important to know how to do things in base R) data transformation –&gt; transforming data using dplyr 4.7.2 Data camp courses dplyr tidyverse working with data in the tidyverse cleaning data cleaning data: case studies string manipulation in R Intermediate R Writing functions in R 4.7.3 Books and chapters Chapters 9-15 in “R for Data Science” Chapter 5 in “Data Visualization - A practical introduction” 4.7.4 Misc Tidyverse style guide 4.8 Session info ## R version 3.6.3 (2020-02-29) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS Catalina 10.15.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] forcats_0.5.0 stringr_1.4.0 dplyr_1.0.2 purrr_0.3.4 ## [5] readr_1.3.1 tidyr_1.1.2 tibble_3.0.3 ggplot2_3.3.1 ## [9] tidyverse_1.3.0 DT_0.15 summarytools_0.9.6 visdat_0.5.3 ## [13] skimr_2.1.2 knitr_1.29 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.4.6 lubridate_1.7.9 utf8_1.1.4 assertthat_0.2.1 ## [5] digest_0.6.25 R6_2.4.1 cellranger_1.1.0 plyr_1.8.6 ## [9] repr_1.1.0 backports_1.1.7 reprex_0.3.0 evaluate_0.14 ## [13] highr_0.8 httr_1.4.1 pillar_1.4.6 rlang_0.4.7 ## [17] readxl_1.3.1 rstudioapi_0.11 blob_1.2.1 magick_2.4.0 ## [21] checkmate_2.0.0 rmarkdown_2.3 labeling_0.3 pander_0.6.3 ## [25] htmlwidgets_1.5.1 munsell_0.5.0 broom_0.7.0.9000 compiler_3.6.3 ## [29] modelr_0.1.8 xfun_0.17 pkgconfig_2.0.3 base64enc_0.1-3 ## [33] htmltools_0.5.0 tcltk_3.6.3 tidyselect_1.1.0 bookdown_0.19 ## [37] codetools_0.2-16 matrixStats_0.56.0 fansi_0.4.1 withr_2.2.0 ## [41] crayon_1.3.4 dbplyr_1.4.4 grid_3.6.3 jsonlite_1.7.1 ## [45] gtable_0.3.0 lifecycle_0.2.0 DBI_1.1.0 magrittr_1.5 ## [49] scales_1.1.1 cli_2.0.2 stringi_1.5.3 farver_2.0.3 ## [53] pryr_0.1.4 fs_1.4.1 xml2_1.3.2 ellipsis_0.3.1 ## [57] rapportools_1.0 generics_0.0.2 vctrs_0.3.4 tools_3.6.3 ## [61] glue_1.4.2 crosstalk_1.1.0.1 hms_0.5.3 yaml_2.2.1 ## [65] colorspace_1.4-1 rvest_0.3.5 haven_2.3.1 "]
]
